JSX
-- javascript xml 
-- write XML-like code for elements and components
-- jsx tags have a tag name,attribute and children
-- jsx is not necessity to write React applications
-- jsx makes react code simpler and elegant
-- jsx ultimately transplies to pure javascript which is understood by the browsers
-- normally we import react but in jsx we dont need to.


Props
-- as we know that components are reusable; props help on that.
-- properties optional input that your component can accept
-- it allows the component to be dynamic
-- first in app.js we decalre an attribute with value
-- then in the mentioned html tag we go to that file functional/class component
-- after that me call props in the function braces and use that in the function with thw attribute name
-- please look at the learning_react project for that as a example
-- in functional component we write props.attribute_name
-- in class component we write this.props.attribute_name

State
-- state is managed within the component
-- variables decalred in the functional body
-- state can be changed
-- useState  hook- functional components this.state-class component

setState
-- always make use of setState and never modify the state directly
-- Code has to be executed after the state has been updated? Place that code in the call back function which is the second argument to the setState method
-- when you have to updated state based on the previous state value, pass in a function as an argument insted of the regular object.

destructuring props and state
-- its an es6 feature that makes it possible to unpack values from arrays or properties from objects into distinct variables
-- in functional component 2 ways to destructure it 
1. const Greet = ({name,heroname}) => {
    return (
        <h1>{name}{heroname}</h1>
    )
}
2. const Greet = props => {
    const {name, heroname} = props
}

-- in class components
1.class Welcome extends Component {
    render() {
        const {name, heroName} = this.props
        return(
            <h1>{name}{heroName}</h1>
        )
    }
}

--for state
1.class Welcome extends Component {
    render() {
       // const {name, heroName} = this.props
       const {state1, state2} = this.state
        return(
            <h1>{name}{heroName}</h1>
        )
    }
}