Lists and keys
- each array or iterator have a unique key prop. in react rendered using the map operator should have a prop called key and value to the prop should be unique
- key prop is not accetable in child components
- and it can be defined like key={prop}
- please refer a project for explaination
- for example 
1. list without key attribute
<ul>
    <li>Bruce</li>
    <li>Clark</li>
</ul>

- without the key attribute no key value and if we add any value in between of list or anywhere it can be a problem. it will be findout that data list is different 
but there is no key value so it need to solve or find the problem will be difficult

2. list with key attribute
<ul>
    <li key="1">Bruce</li>
    <li key="2">Clark</li>
</ul>

- now we know the key value so its easy to findout out the problem in simple way when we know the serial number its easy to modify them and work with them.

-A key is a special attribute you need to include when creating lists od elements
- keys give the elements a stable identity
- keys help react identity which items have changed , are added  or removed
- help in efficient update of the user interface

Index as key anti-pattern

<ul>
    <li key="0">1</li>
    <li key="1">2</li>
    <li key="2">3</li>
</ul>
- we can modify these above list
- when to use index as key?
1. the items in you list do not have a unique id.
2. the list is a static list and will not change.
3. the list will naver be reordered or filtered.

Styling and CSS Basics

1. CSS stylesheet
2. Inline Styling
3. CSS Modules
4. Css in JS libaries

Basics of form handling (Controlled Components)

LifeCycle Methods

- Mounting: when an instance of a component is being created and inserted into the DOM
- updating: when a component is being re-rendered as a result of changes to either its props or state
- unmounting: when a component is being removed from the DOM
- error handling: when there is an error during rendering, in a lifecycle method, or in the constructor of any child component


Mounting lifecycle methods: constructor, static getDerivedStateFromProps, render and componentDidMount
updatting lifecycle methods: static getDerivedStateFromProps, shouldComponentUpdate, render, getSnapshotBeforeUpdate and componentDidMount
unmounting lifecycle methods: componentWillUnmount
error handling lifecycle mthods: static getDerivedStateFromError and componentDidCatch

MOUNTING LIFECYCLE METHODS-----------
constructor: 
- a specialfunction that will get called whenever a new component is created
- initializing state
- binding the event handlers
- super(props) we going to use
- Directly overwrite this.state
- dont call any https request within constructor

static getDerivedStateFromProps:
- when the state of the component depends on changes in props over time
- set the state
- dont call any https request within constructor

render:
- only required method
- Read props and state and return JSX
- Do not change state or interact with DOM or make ajax calls
- Children components lifecycle methods are also executed

componentDidMount():
- invoked immediately after a component and all its Children component have been rendered to the DOM
- interact with the DOM or perform any ajax calls to load data

UPDATING LIFESTYLE METHODS

static getDerivedStateFromProps(props,state):
-method is called every time a component is re-rendered
-set the state
-do not cause any side effects

shouldComponentUpdate(nextProps,nextState):
-Dictates if the component should re-render or not
-Performance optimization
-Do not cause side effects. ex: https request, calling the setState method

render():
-only required method-read props and state and return JSX
-do not change state or interact with DOM or make ajax calls

getSnapshotBeforeUpdate(prevProps,prevState):
-called right before the changes from the virtual DOM are to be reflected in the DOM
- capture some information from the DOM
-Method will either null or return a avalue. Returned value will be passed as athe third parameter to the next method.

componentDidUpdate(prevProps,prevState,snapshot):
-called after the render is finished in the re-render cycles
-cause side effects


UNMOUNTING PHASE METHODS

componentWillUnmount():
-Method is invoked immediately before a component is unmounted and destroyed
-cancelling any network requests, removing event handlers,cancelling any subscriptions and also invalidating timers
-do not call the setState method

ERROR HANDLING PHASE METHODS

static getDerivedStateFromError(error)
componentDidCatch(error,info)

when there is an error either during rendring in a lifecycle method or in the constructor of any child component 